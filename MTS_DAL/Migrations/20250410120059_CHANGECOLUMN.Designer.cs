// <auto-generated />
using System;
using MTS_DAL.DBContextRepository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MTS_DAL.Migrations
{
    [DbContext(typeof(DbcontextRepo))]
    [Migration("20250410120059_CHANGECOLUMN")]
    partial class CHANGECOLUMN
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECCapacitorsSubCategory", b =>
                {
                    b.Property<long>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Trid"));

                    b.Property<string>("SUBCATEGORY")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Trid");

                    b.ToTable("IECCapacitorsSubCategory");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECCapacitorsTypes", b =>
                {
                    b.Property<long>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Trid"));

                    b.Property<long>("CATEGORYID")
                        .HasColumnType("bigint");

                    b.Property<string>("TYPES")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ThetaRef")
                        .HasColumnType("real");

                    b.HasKey("Trid");

                    b.HasIndex("CATEGORYID");

                    b.ToTable("IECCapacitorsTypes");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECChildRegion", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<float>("CapacitiveAndIncandescentLampLoad")
                        .HasColumnType("real");

                    b.Property<float>("InductiveLoad")
                        .HasColumnType("real");

                    b.Property<int>("RegionSubId")
                        .HasColumnType("int");

                    b.Property<float>("ResistiveLoad")
                        .HasColumnType("real");

                    b.HasKey("Trid");

                    b.HasIndex("RegionSubId");

                    b.ToTable("IECChildRegion");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECChildRegionACorDC", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<float>("CapacitiveAndIncandescentLampLoadAC")
                        .HasColumnType("real");

                    b.Property<float>("CapacitiveAndIncandescentLampLoadDC")
                        .HasColumnType("real");

                    b.Property<float>("InductiveLoadAC")
                        .HasColumnType("real");

                    b.Property<float>("InductiveLoadDC")
                        .HasColumnType("real");

                    b.Property<int>("RegionSubId")
                        .HasColumnType("int");

                    b.Property<float>("ResistiveLoadAC")
                        .HasColumnType("real");

                    b.Property<float>("ResistiveLoadDC")
                        .HasColumnType("real");

                    b.HasKey("Trid");

                    b.HasIndex("RegionSubId");

                    b.ToTable("IECChildRegionACorDC");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECConstantForVoltageDependence", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<float>("C1")
                        .HasColumnType("real");

                    b.Property<float>("C2")
                        .HasColumnType("real");

                    b.Property<float>("C3")
                        .HasColumnType("real");

                    b.Property<string>("IntegratedCircuit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("URef")
                        .HasColumnType("real");

                    b.Property<float>("URefDivideURat")
                        .HasColumnType("real");

                    b.HasKey("Trid");

                    b.ToTable("IECConstantForVoltageDependence");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECConstantsForTemperatureDependenceOfCapacitor", b =>
                {
                    b.Property<long>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Trid"));

                    b.Property<float>("A")
                        .HasColumnType("real");

                    b.Property<string>("CapacitorComponent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CapacitorTypeID")
                        .HasColumnType("bigint");

                    b.Property<float>("Ea1")
                        .HasColumnType("real");

                    b.Property<float>("Ea2")
                        .HasColumnType("real");

                    b.HasKey("Trid");

                    b.HasIndex("CapacitorTypeID");

                    b.ToTable("IECConstantsForTemperatureDependenceOfCapacitor");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECConstantsForTemperatureDependenceOfDiscreteSemiconductors", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<float>("A")
                        .HasColumnType("real");

                    b.Property<string>("ConstantsType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Ea1")
                        .HasColumnType("real");

                    b.Property<float>("Ea2")
                        .HasColumnType("real");

                    b.HasKey("Trid");

                    b.ToTable("IECConstantsForTemperatureDependenceOfDiscreteSemiconductors");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECConstantsForTemperatureDependenceOfOptoelectronicComponents", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<string>("ConstantsType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Ea")
                        .HasColumnType("real");

                    b.HasKey("Trid");

                    b.ToTable("IECConstantsForTemperatureDependenceOfOptoelectronicComponents");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECConstantsForTemperatureDependenceOfRelays", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<float?>("A")
                        .HasColumnType("real");

                    b.Property<float?>("Ea1")
                        .HasColumnType("real");

                    b.Property<float?>("Ea2")
                        .HasColumnType("real");

                    b.Property<string>("SupportingConstruction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Trid");

                    b.ToTable("IECConstantsForTemperatureDependenceOfRelays");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECConstantsForVoltageDependenceOfCapacitor", b =>
                {
                    b.Property<long>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Trid"));

                    b.Property<double>("C2")
                        .HasColumnType("float");

                    b.Property<double>("C3")
                        .HasColumnType("float");

                    b.Property<string>("CapacitorType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CapacitorTypeID")
                        .HasColumnType("bigint");

                    b.Property<double>("URefDivURat")
                        .HasColumnType("float");

                    b.HasKey("Trid");

                    b.HasIndex("CapacitorTypeID");

                    b.ToTable("IECConstantsForVoltageDependenceOfCapacitor");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECDiscreteSemiconductors", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<string>("SUBCATEGORY")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Trid");

                    b.ToTable("IECDiscreteSemiconductors");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECDiscreteSemiconductorsSubcategory", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<int>("CONSTANTSTYPEID")
                        .HasColumnType("int");

                    b.Property<int>("SUBCATEGORYID")
                        .HasColumnType("int");

                    b.Property<float>("THETAREF")
                        .HasColumnType("real");

                    b.Property<string>("TYPES")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Trid");

                    b.HasIndex("CONSTANTSTYPEID");

                    b.HasIndex("SUBCATEGORYID");

                    b.ToTable("IECDiscreteSemiconductorsSubcategory");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECInductorsTransformersAndCoils", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<float>("ThetaReference")
                        .HasColumnType("real");

                    b.Property<string>("TransformerType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Trid");

                    b.ToTable("IECInductorsTransformersAndCoils");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECOptoelectronicComponents", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<string>("OptoelectronicTypes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Trid");

                    b.ToTable("IECOptoelectronicComponents");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECOptoelectronicComponentsSubCategory", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<int>("ComponentsSubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("OptoelectronicComponentsSubCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ThetaRef")
                        .HasColumnType("real");

                    b.HasKey("Trid");

                    b.HasIndex("ComponentsSubCategoryId");

                    b.ToTable("IECOptoelectronicComponentsSubCategory");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECPredictionCapacitor", b =>
                {
                    b.Property<long>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Trid"));

                    b.Property<double?>("AVERAGEACTUALTEMPERATURE")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CREATEDDATE")
                        .HasColumnType("datetime2");

                    b.Property<double?>("LAMBDA")
                        .HasColumnType("float");

                    b.Property<double?>("LAMBDAREF")
                        .HasColumnType("float");

                    b.Property<double?>("OPERATINGVOLTAGEINV")
                        .HasColumnType("float");

                    b.Property<double?>("PIET")
                        .HasColumnType("float");

                    b.Property<double?>("PIEU")
                        .HasColumnType("float");

                    b.Property<long>("PROJECTID")
                        .HasColumnType("bigint");

                    b.Property<double?>("RATEDVOLTAGEINV")
                        .HasColumnType("float");

                    b.Property<long>("SUBCATEGORYID")
                        .HasColumnType("bigint");

                    b.Property<double?>("THETAOP")
                        .HasColumnType("float");

                    b.Property<double?>("THETAREF")
                        .HasColumnType("float");

                    b.Property<long>("TYPEID")
                        .HasColumnType("bigint");

                    b.Property<double?>("UOPDIVEDEURATE")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UPDATEDATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("USERIDZU")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("WBS")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("Trid");

                    b.HasIndex("PROJECTID");

                    b.HasIndex("SUBCATEGORYID");

                    b.HasIndex("TYPEID");

                    b.ToTable("IECPredictionCapacitor");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECPredictionDiscreteSemiconductors", b =>
                {
                    b.Property<long>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Trid"));

                    b.Property<double?>("AmbientTemperature")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Fmax")
                        .HasColumnType("float");

                    b.Property<double?>("Fop")
                        .HasColumnType("float");

                    b.Property<double?>("Lambda")
                        .HasColumnType("float");

                    b.Property<double?>("LambdaRef")
                        .HasColumnType("float");

                    b.Property<double?>("MaxSupplyCurrent")
                        .HasColumnType("float");

                    b.Property<double?>("NominalVoltage")
                        .HasColumnType("float");

                    b.Property<double?>("OperatingVoltage")
                        .HasColumnType("float");

                    b.Property<double?>("Pfwc")
                        .HasColumnType("float");

                    b.Property<double?>("PieT")
                        .HasColumnType("float");

                    b.Property<double?>("PieU")
                        .HasColumnType("float");

                    b.Property<long?>("ProjectID")
                        .HasColumnType("bigint");

                    b.Property<double?>("RatedVoltage")
                        .HasColumnType("float");

                    b.Property<int>("SUBCATEGORYID")
                        .HasColumnType("int");

                    b.Property<int>("TYPESID")
                        .HasColumnType("int");

                    b.Property<double?>("ThermalResistance")
                        .HasColumnType("float");

                    b.Property<double?>("ThetaOp")
                        .HasColumnType("float");

                    b.Property<double?>("ThetaRef")
                        .HasColumnType("float");

                    b.Property<string>("USERIDZU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("UopDivideUrat")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WBS")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("Trid");

                    b.HasIndex("ProjectID");

                    b.HasIndex("SUBCATEGORYID");

                    b.HasIndex("TYPESID");

                    b.ToTable("IECPredictionDiscreteSemiconductors");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECPredictionInductorsTransformersAndCoils", b =>
                {
                    b.Property<long>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Trid"));

                    b.Property<double?>("AmbientTemperature")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Lambda")
                        .HasColumnType("float");

                    b.Property<double?>("LambdaRef")
                        .HasColumnType("float");

                    b.Property<double?>("MaximumOperatingFrequencyMHz")
                        .HasColumnType("float");

                    b.Property<double?>("MaximumSupplyCurrentA")
                        .HasColumnType("float");

                    b.Property<double?>("NominalVoltage")
                        .HasColumnType("float");

                    b.Property<double?>("OperatingFrequencyMHz")
                        .HasColumnType("float");

                    b.Property<long>("PROJECTID")
                        .HasColumnType("bigint");

                    b.Property<double?>("PieT")
                        .HasColumnType("float");

                    b.Property<double?>("ThermalResistance")
                        .HasColumnType("float");

                    b.Property<int?>("TransformerTypeId")
                        .HasColumnType("int");

                    b.Property<string>("USERIDZU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WBS")
                        .HasColumnType("varchar(30)");

                    b.Property<double?>("WorstCasePowerDissipationAtMaximumFrequencyW")
                        .HasColumnType("float");

                    b.HasKey("Trid");

                    b.HasIndex("PROJECTID");

                    b.HasIndex("TransformerTypeId");

                    b.ToTable("IECPredictionInductorsTransformersAndCoils");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECPredictionIntegratedSemiconductorCircuits", b =>
                {
                    b.Property<long>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Trid"));

                    b.Property<double?>("AmbientTemperature")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CREATEDDATE")
                        .HasColumnType("datetime2");

                    b.Property<int>("CircuitType")
                        .HasColumnType("int");

                    b.Property<int>("ConstantsType")
                        .HasColumnType("int");

                    b.Property<double?>("Lambda")
                        .HasColumnType("float");

                    b.Property<double?>("LambdaRef")
                        .HasColumnType("float");

                    b.Property<double?>("MaximumOperatingFrequencyMHz")
                        .HasColumnType("float");

                    b.Property<double?>("MaximumSupplyCurrentA")
                        .HasColumnType("float");

                    b.Property<double?>("NominalVoltage")
                        .HasColumnType("float");

                    b.Property<double?>("OperatingFrequencyMHz")
                        .HasColumnType("float");

                    b.Property<double?>("OperatingVoltageInV")
                        .HasColumnType("float");

                    b.Property<double?>("PieT")
                        .HasColumnType("float");

                    b.Property<double?>("PieU")
                        .HasColumnType("float");

                    b.Property<long>("ProjectID")
                        .HasColumnType("bigint");

                    b.Property<double?>("RatedVoltageInV")
                        .HasColumnType("float");

                    b.Property<int>("SubComponent")
                        .HasColumnType("int");

                    b.Property<double?>("ThermalResistance")
                        .HasColumnType("float");

                    b.Property<double?>("ThetaOp")
                        .HasColumnType("float");

                    b.Property<double?>("ThetaRef")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UPDATEDATE")
                        .HasColumnType("datetime2");

                    b.Property<double?>("URefDivideURat")
                        .HasColumnType("float");

                    b.Property<string>("USERIDZU")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("WBS")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<double?>("worstCasePowerDissipationAtMaximumFrequencyW")
                        .HasColumnType("float");

                    b.HasKey("Trid");

                    b.HasIndex("ProjectID");

                    b.ToTable("IECPredictionIntegratedSemiconductorCircuits");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECPredictionOptoelectronicComponent", b =>
                {
                    b.Property<long>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Trid"));

                    b.Property<double?>("AmbientTemperature")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CREATEDDATE")
                        .HasColumnType("datetime2");

                    b.Property<int>("ConstantsTypeId")
                        .HasColumnType("int");

                    b.Property<double?>("Lambda")
                        .HasColumnType("float");

                    b.Property<double?>("LambdaRef")
                        .HasColumnType("float");

                    b.Property<double?>("MaximumOperatingFrequencyMHz")
                        .HasColumnType("float");

                    b.Property<double?>("MaximumSupplyCurrentA")
                        .HasColumnType("float");

                    b.Property<double?>("NominalVoltage")
                        .HasColumnType("float");

                    b.Property<double?>("OperatingFrequencyMHz")
                        .HasColumnType("float");

                    b.Property<double?>("OperatingVoltageInV")
                        .HasColumnType("float");

                    b.Property<int>("OptoelectronicComponentsSubCategory")
                        .HasColumnType("int");

                    b.Property<int>("OptoelectronicTypes")
                        .HasColumnType("int");

                    b.Property<long>("PROJECTid")
                        .HasColumnType("bigint");

                    b.Property<double?>("PieI")
                        .HasColumnType("float");

                    b.Property<double?>("PieT")
                        .HasColumnType("float");

                    b.Property<double?>("PieU")
                        .HasColumnType("float");

                    b.Property<double?>("RatedVoltageInV")
                        .HasColumnType("float");

                    b.Property<double?>("ReferenceVoltageInV")
                        .HasColumnType("float");

                    b.Property<double?>("ThermalResistance")
                        .HasColumnType("float");

                    b.Property<double?>("ThetaOp")
                        .HasColumnType("float");

                    b.Property<double?>("ThetaRef")
                        .HasColumnType("float");

                    b.Property<double?>("UOpDivURat")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UPDATEDATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("USERIDZU")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("WBS")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<double?>("WorstCasePowerDissipationAtMaximumFrequencyW")
                        .HasColumnType("float");

                    b.HasKey("Trid");

                    b.HasIndex("ConstantsTypeId");

                    b.HasIndex("OptoelectronicComponentsSubCategory");

                    b.HasIndex("OptoelectronicTypes");

                    b.HasIndex("PROJECTid");

                    b.ToTable("IECPredictionOptoelectronicComponent");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECPredictionRelays", b =>
                {
                    b.Property<long>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Trid"));

                    b.Property<double?>("AmbientTemperature")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CREATEDDATE")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Lambda")
                        .HasColumnType("float");

                    b.Property<double?>("LambdaRef")
                        .HasColumnType("float");

                    b.Property<int?>("LoadType")
                        .HasColumnType("int");

                    b.Property<double?>("NumberOfOperatingCyclesPerHour")
                        .HasColumnType("float");

                    b.Property<long>("PROJECTID")
                        .HasColumnType("bigint");

                    b.Property<double?>("PieEs")
                        .HasColumnType("float");

                    b.Property<double?>("PieS")
                        .HasColumnType("float");

                    b.Property<double?>("PieT")
                        .HasColumnType("float");

                    b.Property<double?>("ReferenceNumberOperatingCyclesPerHour")
                        .HasColumnType("float");

                    b.Property<int?>("RegionType")
                        .HasColumnType("int");

                    b.Property<int?>("SupportingConstructionType")
                        .HasColumnType("int");

                    b.Property<double?>("ThetaOp")
                        .HasColumnType("float");

                    b.Property<double?>("ThetaRef")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UPDATEDATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("USERIDZU")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("WBS")
                        .HasColumnType("varchar(30)");

                    b.HasKey("Trid");

                    b.HasIndex("PROJECTID");

                    b.HasIndex("SupportingConstructionType");

                    b.ToTable("IECPredictionRelays");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECPredictionResistorsAndResistorNetworks", b =>
                {
                    b.Property<long>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Trid"));

                    b.Property<double?>("AmbiantTemperature")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CREATEDDATE")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InputType")
                        .HasColumnType("int");

                    b.Property<double?>("Lambda")
                        .HasColumnType("float");

                    b.Property<double?>("LambdaRef")
                        .HasColumnType("float");

                    b.Property<double?>("OperatingTemperature")
                        .HasColumnType("float");

                    b.Property<long>("PROJECTID")
                        .HasColumnType("bigint");

                    b.Property<double?>("PieT")
                        .HasColumnType("float");

                    b.Property<int?>("ResistorType")
                        .HasColumnType("int");

                    b.Property<double?>("ThetaMax")
                        .HasColumnType("float");

                    b.Property<double?>("ThetaOp")
                        .HasColumnType("float");

                    b.Property<double?>("ThetaRef")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UPDATEDATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("USERIDZU")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("WBS")
                        .HasColumnType("varchar(30)");

                    b.HasKey("Trid");

                    b.HasIndex("InputType");

                    b.HasIndex("PROJECTID");

                    b.HasIndex("ResistorType");

                    b.ToTable("IECPredictionResistorsAndResistorNetworks");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECPredictionSwitchesAndPushButtonsForLowElectricalStress", b =>
                {
                    b.Property<long>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Trid"));

                    b.Property<DateTime?>("CREATEDDATE")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Lambda")
                        .HasColumnType("float");

                    b.Property<double?>("LambdaRef")
                        .HasColumnType("float");

                    b.Property<int?>("LoadType")
                        .HasColumnType("int");

                    b.Property<long>("PROJECTID")
                        .HasColumnType("bigint");

                    b.Property<double?>("PieEs")
                        .HasColumnType("float");

                    b.Property<int?>("RegionType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UPDATEDATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("USERIDZU")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("WBS")
                        .HasColumnType("varchar(30)");

                    b.HasKey("Trid");

                    b.HasIndex("PROJECTID");

                    b.ToTable("IECPredictionSwitchesAndPushButtonsForLowElectricalStress");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECRegionType", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("RegionTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Trid");

                    b.HasIndex("RegionId");

                    b.ToTable("IECRegionType");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECRelay", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<string>("RelayType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Trid");

                    b.ToTable("IECRelay");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECRelayLoadCategory", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<int>("LoadIndex")
                        .HasColumnType("int");

                    b.Property<string>("LoadType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Trid");

                    b.ToTable("IECRelayLoadCategory");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECRelayLoadType", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<int>("LoadIndex")
                        .HasColumnType("int");

                    b.Property<string>("LoadType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Trid");

                    b.ToTable("IECRelayLoadType");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECResistorsAndResistorNetworks", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<string>("ResistorType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ThetaRef")
                        .HasColumnType("real");

                    b.HasKey("Trid");

                    b.ToTable("IECResistorsAndResistorNetworks");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECResistorsAndResistorNetworksInputType", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<string>("InputType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Trid");

                    b.ToTable("IECResistorsAndResistorNetworksInputType");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECSwitchesAndPushButtonsForLowElectricalStress", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<string>("SwitchesType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Trid");

                    b.ToTable("IECSwitchesAndPushButtonsForLowElectricalStress");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECTypeComponent", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<string>("ComponentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Trid");

                    b.ToTable("IECTypeComponent");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECTypeComponentSubCategory", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<string>("SubCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<double?>("ThetaRef")
                        .HasColumnType("float");

                    b.HasKey("Trid");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("IECTypeComponentSubCategory");
                });

            modelBuilder.Entity("MTS_DAL.Entities.Lifecyclephases", b =>
                {
                    b.Property<long>("TRID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TRID"));

                    b.Property<string>("DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LIFECYCLEPHASE")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TRID");

                    b.ToTable("Lifecyclephases");
                });

            modelBuilder.Entity("MTS_DAL.Entities.PredictionCategories", b =>
                {
                    b.Property<long>("TRID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TRID"));

                    b.Property<long>("BOOKID")
                        .HasColumnType("bigint");

                    b.Property<string>("CATEGORYNAME")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TRID");

                    b.HasIndex("BOOKID");

                    b.ToTable("PredictionCategories");
                });

            modelBuilder.Entity("MTS_DAL.Entities.PredictionHandBook", b =>
                {
                    b.Property<long>("TRID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TRID"));

                    b.Property<string>("BOOKNAME")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TRID");

                    b.ToTable("PredictionHandBook");
                });

            modelBuilder.Entity("MTS_DAL.Entities.ProductTypes", b =>
                {
                    b.Property<long>("TRID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TRID"));

                    b.Property<string>("DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PRODUCTTYPE")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TRID");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("MTS_DAL.Entities.RAMBRAKDOWN", b =>
                {
                    b.Property<string>("PWBS")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("WBS")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ALTLCNXB")
                        .HasColumnType("varchar(2)");

                    b.Property<float?>("AMBIENTNONOPERATINGTEMPERATURE")
                        .HasColumnType("real");

                    b.Property<float?>("AMBIENTOPERATINGTEMPERATURE")
                        .HasColumnType("real");

                    b.Property<string>("CAGECDXH")
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime?>("CREATEDDATE")
                        .HasColumnType("datetime2");

                    b.Property<float?>("CYCLERATE")
                        .HasColumnType("real");

                    b.Property<string>("DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("DUTYCYCLE")
                        .HasColumnType("real");

                    b.Property<int?>("ENVIRONMENTID")
                        .HasColumnType("int");

                    b.Property<int?>("EQUIPMENTTYPEID")
                        .HasColumnType("INT");

                    b.Property<float?>("FAILURERATE")
                        .HasColumnType("real");

                    b.Property<float?>("FAILURERATECALCULATED")
                        .HasColumnType("real");

                    b.Property<bool?>("FAILURERATEOVERIDE")
                        .HasColumnType("bit");

                    b.Property<float?>("FAILURERATEPERCENTAGE")
                        .HasColumnType("real");

                    b.Property<int?>("FLAGID")
                        .HasColumnType("int");

                    b.Property<float?>("FRContribution")
                        .HasColumnType("real");

                    b.Property<string>("LCNAMEXB")
                        .HasColumnType("varchar(19)");

                    b.Property<string>("LSACONXB")
                        .HasColumnType("varchar(18)");

                    b.Property<float?>("MTBF")
                        .HasColumnType("real");

                    b.Property<long>("PROJECTID")
                        .HasColumnType("bigint");

                    b.Property<string>("QTYASYHG")
                        .IsRequired()
                        .HasColumnType("varchar(4)");

                    b.Property<string>("REFDESHJ")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("REFNUMHA")
                        .HasColumnType("varchar(32)");

                    b.Property<float?>("RELATIVEHUMIDITY")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UPDATEDATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("USERIDZU")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<float?>("VIBRATION")
                        .HasColumnType("real");

                    b.HasKey("PWBS", "WBS");

                    b.HasIndex("PROJECTID");

                    b.ToTable("RAMBRAKDOWN");
                });

            modelBuilder.Entity("MTS_DAL.Entities.RAMBRAKDOWNPARTS", b =>
                {
                    b.Property<long>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Trid"));

                    b.Property<string>("ALTLCNXB")
                        .HasColumnType("varchar(2)");

                    b.Property<string>("CAGECDXH")
                        .HasColumnType("varchar(5)");

                    b.Property<long?>("CALMETHODID")
                        .HasColumnType("bigint");

                    b.Property<long?>("CATEGORYID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CREATEDDATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("FAILURERATE")
                        .HasColumnType("float");

                    b.Property<float?>("FAILURERATECALCULATED")
                        .HasColumnType("real");

                    b.Property<bool?>("FAILURERATEOVERIDE")
                        .HasColumnType("bit");

                    b.Property<double?>("FAILURERATEPERCENTAGE")
                        .HasColumnType("float");

                    b.Property<int?>("FLAGID")
                        .HasColumnType("int");

                    b.Property<float?>("FRContribution")
                        .HasColumnType("real");

                    b.Property<string>("ITNAMEHA")
                        .HasColumnType("varchar(19)");

                    b.Property<string>("LSACONXB")
                        .HasColumnType("varchar(18)");

                    b.Property<double?>("MTBF")
                        .HasColumnType("float");

                    b.Property<long>("PROJECTID")
                        .HasColumnType("bigint");

                    b.Property<string>("PWBS")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("QTYASYHG")
                        .HasColumnType("varchar(4)");

                    b.Property<string>("REFDESHJ")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("REFNUMHA")
                        .HasColumnType("varchar(32)");

                    b.Property<long?>("SUBCATEGORYID")
                        .HasColumnType("bigint");

                    b.Property<long?>("TYPESID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UPDATEDATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("USERIDZU")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("WBS")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("Trid");

                    b.HasIndex("PROJECTID");

                    b.HasIndex("PWBS", "WBS");

                    b.ToTable("RAMBRAKDOWNPARTS");
                });

            modelBuilder.Entity("MTS_DAL.Entities.RAMCAGE", b =>
                {
                    b.Property<string>("CAGECDXH")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("CACITYXH")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CANAMEXH")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("CANATNXH")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CAPOZOXH")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CASTATXH")
                        .HasColumnType("varchar(2)");

                    b.Property<string>("CASTREXH")
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("CREATEDDATE")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UPDATEDATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("USERIDZU")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("CAGECDXH");

                    b.ToTable("RAMCAGE");
                });

            modelBuilder.Entity("MTS_DAL.Entities.RAMPARTS", b =>
                {
                    b.Property<string>("REFNUMHA")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("CAGECDXH")
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime?>("CREATEDDATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("ITNAMEHA")
                        .HasColumnType("varchar(19)");

                    b.Property<string>("MATERLHA")
                        .HasColumnType("varchar(240)");

                    b.Property<DateTime?>("UPDATEDATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("USERIDZU")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("REFNUMHA");

                    b.HasIndex("CAGECDXH");

                    b.ToTable("RAMPARTS");
                });

            modelBuilder.Entity("MTS_DAL.Entities.RAMProjects", b =>
                {
                    b.Property<long>("PROJECTID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PROJECTID"));

                    b.Property<DateTime?>("CREATEDDATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EIACODXA")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("LCNTYPXB")
                        .HasColumnType("char(1)");

                    b.Property<long?>("LIFECYCLEPHASEID")
                        .HasColumnType("bigint");

                    b.Property<float?>("OPRLIFXA")
                        .HasColumnType("real");

                    b.Property<DateTime?>("PROGRAMENDDATE")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PROGRAMSTARTDATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("PROJECTNAME")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("REMARKS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TYPEOFPRODUCTID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UPDATEDATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("USERIDZU")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("PROJECTID");

                    b.HasIndex("LIFECYCLEPHASEID");

                    b.HasIndex("TYPEOFPRODUCTID");

                    b.ToTable("RAMProjects");
                });

            modelBuilder.Entity("MTS_DAL.Entities.TwoOneSeveenNoticeTwo.R2Capacitor", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<float?>("Betaβ")
                        .HasColumnType("real");

                    b.Property<float?>("C1")
                        .HasColumnType("real");

                    b.Property<float?>("CE")
                        .HasColumnType("real");

                    b.Property<float?>("EANonOp")
                        .HasColumnType("real");

                    b.Property<float?>("EAOp")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaEB")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaIND")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaOB")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaTCB")
                        .HasColumnType("real");

                    b.Property<float?>("N")
                        .HasColumnType("real");

                    b.Property<string>("PartType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("S1")
                        .HasColumnType("real");

                    b.HasKey("Trid");

                    b.ToTable("R2Capacitor");
                });

            modelBuilder.Entity("MTS_DAL.Entities.TwoOneSeveenNoticeTwo.R2Connectors", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<float?>("LambdaEB")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaIND")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaOB")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaTCB")
                        .HasColumnType("real");

                    b.Property<string>("PartType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Trid");

                    b.ToTable("R2Connectors");
                });

            modelBuilder.Entity("MTS_DAL.Entities.TwoOneSeveenNoticeTwo.R2Diode", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<float?>("Betaβ")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaEB")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaIND")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaOB")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaTCB")
                        .HasColumnType("real");

                    b.Property<string>("PartType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Trid");

                    b.ToTable("R2Diode");
                });

            modelBuilder.Entity("MTS_DAL.Entities.TwoOneSeveenNoticeTwo.R2Inductors", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<float?>("LambdaEB")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaIND")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaOB")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaTCB")
                        .HasColumnType("real");

                    b.Property<string>("PartType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Trid");

                    b.ToTable("R2Inductors");
                });

            modelBuilder.Entity("MTS_DAL.Entities.TwoOneSeveenNoticeTwo.R2IntegratedCircuitsPlasticEncapsulatedPackageType", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<string>("PackageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Trid");

                    b.ToTable("R2IntegratedCircuitsPlasticEncapsulatedPackageType");
                });

            modelBuilder.Entity("MTS_DAL.Entities.TwoOneSeveenNoticeTwo.R2IntegratedCircuitsPlasticEncapsulatedPartType", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<float?>("Betaβ")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaEB")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaIND")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaOB")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaTCB")
                        .HasColumnType("real");

                    b.Property<int>("PackageTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PartType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("TRDEFAULT")
                        .HasColumnType("real");

                    b.HasKey("Trid");

                    b.HasIndex("PackageTypeId");

                    b.ToTable("R2IntegratedCircuitsPlasticEncapsulatedPartType");
                });

            modelBuilder.Entity("MTS_DAL.Entities.TwoOneSeveenNoticeTwo.R2OptoelectronicDevices", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<float?>("LambdaEB")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaIND")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaOB")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaTCB")
                        .HasColumnType("real");

                    b.Property<string>("PartType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Trid");

                    b.ToTable("R2OptoelectronicDevices");
                });

            modelBuilder.Entity("MTS_DAL.Entities.TwoOneSeveenNoticeTwo.R2PhotonicsDevices", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<float?>("EaOP")
                        .HasColumnType("real");

                    b.Property<float?>("Ea_NONOP")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaEB")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaIND")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaOB")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaTCB")
                        .HasColumnType("real");

                    b.Property<float?>("NPC")
                        .HasColumnType("real");

                    b.Property<float?>("NRH")
                        .HasColumnType("real");

                    b.Property<float?>("NVIB")
                        .HasColumnType("real");

                    b.Property<string>("PartType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("TRDefault")
                        .HasColumnType("real");

                    b.HasKey("Trid");

                    b.ToTable("R2PhotonicsDevices");
                });

            modelBuilder.Entity("MTS_DAL.Entities.TwoOneSeveenNoticeTwo.R2Relays", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<float?>("LambdaEB")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaIND")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaOB")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaTCB")
                        .HasColumnType("real");

                    b.Property<string>("PartType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Trid");

                    b.ToTable("R2Relays");
                });

            modelBuilder.Entity("MTS_DAL.Entities.TwoOneSeveenNoticeTwo.R2Resistors", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<float?>("LambdaEB")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaIND")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaOB")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaTCB")
                        .HasColumnType("real");

                    b.Property<string>("PartType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("TRDEFAULT")
                        .HasColumnType("real");

                    b.HasKey("Trid");

                    b.ToTable("R2Resistors");
                });

            modelBuilder.Entity("MTS_DAL.Entities.TwoOneSeveenNoticeTwo.R2Switches", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<float?>("LambdaEB")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaIND")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaOB")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaTCB")
                        .HasColumnType("real");

                    b.Property<string>("PartType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Trid");

                    b.ToTable("R2Switches");
                });

            modelBuilder.Entity("MTS_DAL.Entities.TwoOneSeveenNoticeTwo.R2Thyristor", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<float?>("LambdaEB")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaIND")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaOB")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaTCB")
                        .HasColumnType("real");

                    b.Property<string>("PartType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Trid");

                    b.ToTable("R2Thyristor");
                });

            modelBuilder.Entity("MTS_DAL.Entities.TwoOneSeveenNoticeTwo.R2Transformers", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<float?>("LambdaEB")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaIND")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaOB")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaTCB")
                        .HasColumnType("real");

                    b.Property<string>("PartType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Trid");

                    b.ToTable("R2Transformers");
                });

            modelBuilder.Entity("MTS_DAL.Entities.TwoOneSeveenNoticeTwo.R2Transistor", b =>
                {
                    b.Property<int>("Trid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trid"));

                    b.Property<float?>("Betaβ")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaEB")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaIND")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaOB")
                        .HasColumnType("real");

                    b.Property<float?>("LambdaTCB")
                        .HasColumnType("real");

                    b.Property<string>("PartType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Trid");

                    b.ToTable("R2Transistor");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECCapacitorsTypes", b =>
                {
                    b.HasOne("MTS_DAL.Entities.IEC.IECCapacitorsSubCategory", "iECCapacitorsSubCategory")
                        .WithMany()
                        .HasForeignKey("CATEGORYID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("iECCapacitorsSubCategory");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECChildRegion", b =>
                {
                    b.HasOne("MTS_DAL.Entities.IEC.IECRegionType", "iECRegionType")
                        .WithMany()
                        .HasForeignKey("RegionSubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("iECRegionType");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECChildRegionACorDC", b =>
                {
                    b.HasOne("MTS_DAL.Entities.IEC.IECRegionType", "iECRegionType")
                        .WithMany()
                        .HasForeignKey("RegionSubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("iECRegionType");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECConstantsForTemperatureDependenceOfCapacitor", b =>
                {
                    b.HasOne("MTS_DAL.Entities.IEC.IECCapacitorsTypes", "iECCapacitorsTypes")
                        .WithMany()
                        .HasForeignKey("CapacitorTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("iECCapacitorsTypes");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECConstantsForVoltageDependenceOfCapacitor", b =>
                {
                    b.HasOne("MTS_DAL.Entities.IEC.IECCapacitorsTypes", "iECCapacitorsTypes")
                        .WithMany()
                        .HasForeignKey("CapacitorTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("iECCapacitorsTypes");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECDiscreteSemiconductorsSubcategory", b =>
                {
                    b.HasOne("MTS_DAL.Entities.IEC.IECConstantsForTemperatureDependenceOfDiscreteSemiconductors", "iECConstantsForTemperatureDependenceOfDiscreteSemiconductors")
                        .WithMany()
                        .HasForeignKey("CONSTANTSTYPEID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MTS_DAL.Entities.IEC.IECDiscreteSemiconductors", "iECDiscreteSemiconductors")
                        .WithMany()
                        .HasForeignKey("SUBCATEGORYID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("iECConstantsForTemperatureDependenceOfDiscreteSemiconductors");

                    b.Navigation("iECDiscreteSemiconductors");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECOptoelectronicComponentsSubCategory", b =>
                {
                    b.HasOne("MTS_DAL.Entities.IEC.IECOptoelectronicComponents", "iECOptoelectronicComponents")
                        .WithMany()
                        .HasForeignKey("ComponentsSubCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("iECOptoelectronicComponents");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECPredictionCapacitor", b =>
                {
                    b.HasOne("MTS_DAL.Entities.RAMProjects", "Projects")
                        .WithMany()
                        .HasForeignKey("PROJECTID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MTS_DAL.Entities.IEC.IECCapacitorsSubCategory", "iECCapacitorsSubCategory")
                        .WithMany()
                        .HasForeignKey("SUBCATEGORYID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MTS_DAL.Entities.IEC.IECCapacitorsTypes", "iECCapacitorsTypes")
                        .WithMany()
                        .HasForeignKey("TYPEID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Projects");

                    b.Navigation("iECCapacitorsSubCategory");

                    b.Navigation("iECCapacitorsTypes");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECPredictionDiscreteSemiconductors", b =>
                {
                    b.HasOne("MTS_DAL.Entities.RAMProjects", "RAMProjects")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MTS_DAL.Entities.IEC.IECDiscreteSemiconductors", "iECDiscreteSemiconductors")
                        .WithMany()
                        .HasForeignKey("SUBCATEGORYID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MTS_DAL.Entities.IEC.IECDiscreteSemiconductorsSubcategory", "iECDiscreteSemiconductorsSubcategory")
                        .WithMany()
                        .HasForeignKey("TYPESID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RAMProjects");

                    b.Navigation("iECDiscreteSemiconductors");

                    b.Navigation("iECDiscreteSemiconductorsSubcategory");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECPredictionInductorsTransformersAndCoils", b =>
                {
                    b.HasOne("MTS_DAL.Entities.RAMProjects", "Projects")
                        .WithMany()
                        .HasForeignKey("PROJECTID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MTS_DAL.Entities.IEC.IECInductorsTransformersAndCoils", "iECInductorsTransformersAndCOils")
                        .WithMany()
                        .HasForeignKey("TransformerTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Projects");

                    b.Navigation("iECInductorsTransformersAndCOils");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECPredictionIntegratedSemiconductorCircuits", b =>
                {
                    b.HasOne("MTS_DAL.Entities.RAMProjects", "RAMProject")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RAMProject");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECPredictionOptoelectronicComponent", b =>
                {
                    b.HasOne("MTS_DAL.Entities.IEC.IECConstantsForTemperatureDependenceOfOptoelectronicComponents", "iECConstantsForTemperatureDependence")
                        .WithMany()
                        .HasForeignKey("ConstantsTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MTS_DAL.Entities.IEC.IECOptoelectronicComponentsSubCategory", "iECOptoelectronicComponentsSub")
                        .WithMany()
                        .HasForeignKey("OptoelectronicComponentsSubCategory")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MTS_DAL.Entities.IEC.IECOptoelectronicComponents", "iECOptoelectronicComponents")
                        .WithMany()
                        .HasForeignKey("OptoelectronicTypes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTS_DAL.Entities.RAMProjects", "rAMProjects")
                        .WithMany()
                        .HasForeignKey("PROJECTid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("iECConstantsForTemperatureDependence");

                    b.Navigation("iECOptoelectronicComponents");

                    b.Navigation("iECOptoelectronicComponentsSub");

                    b.Navigation("rAMProjects");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECPredictionRelays", b =>
                {
                    b.HasOne("MTS_DAL.Entities.RAMProjects", "Projects")
                        .WithMany()
                        .HasForeignKey("PROJECTID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTS_DAL.Entities.IEC.IECConstantsForTemperatureDependenceOfRelays", "iECConstantsForTemperatureDependenceOfRelays")
                        .WithMany()
                        .HasForeignKey("SupportingConstructionType")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Projects");

                    b.Navigation("iECConstantsForTemperatureDependenceOfRelays");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECPredictionResistorsAndResistorNetworks", b =>
                {
                    b.HasOne("MTS_DAL.Entities.IEC.IECResistorsAndResistorNetworksInputType", "eCResistorsAndResistorNetworksInputType")
                        .WithMany()
                        .HasForeignKey("InputType")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MTS_DAL.Entities.RAMProjects", "Projects")
                        .WithMany()
                        .HasForeignKey("PROJECTID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTS_DAL.Entities.IEC.IECResistorsAndResistorNetworks", "iECResistorsAndResistor")
                        .WithMany()
                        .HasForeignKey("ResistorType")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Projects");

                    b.Navigation("eCResistorsAndResistorNetworksInputType");

                    b.Navigation("iECResistorsAndResistor");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECPredictionSwitchesAndPushButtonsForLowElectricalStress", b =>
                {
                    b.HasOne("MTS_DAL.Entities.RAMProjects", "Projects")
                        .WithMany()
                        .HasForeignKey("PROJECTID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECRegionType", b =>
                {
                    b.HasOne("MTS_DAL.Entities.IEC.IECRelay", "iECRelay")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("iECRelay");
                });

            modelBuilder.Entity("MTS_DAL.Entities.IEC.IECTypeComponentSubCategory", b =>
                {
                    b.HasOne("MTS_DAL.Entities.IEC.IECTypeComponent", "iECTypeComponent")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("iECTypeComponent");
                });

            modelBuilder.Entity("MTS_DAL.Entities.PredictionCategories", b =>
                {
                    b.HasOne("MTS_DAL.Entities.PredictionHandBook", "PreductionHandBook")
                        .WithMany()
                        .HasForeignKey("BOOKID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PreductionHandBook");
                });

            modelBuilder.Entity("MTS_DAL.Entities.RAMBRAKDOWN", b =>
                {
                    b.HasOne("MTS_DAL.Entities.RAMProjects", "RAMProjects")
                        .WithMany()
                        .HasForeignKey("PROJECTID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RAMProjects");
                });

            modelBuilder.Entity("MTS_DAL.Entities.RAMBRAKDOWNPARTS", b =>
                {
                    b.HasOne("MTS_DAL.Entities.RAMProjects", "RAMProjects")
                        .WithMany()
                        .HasForeignKey("PROJECTID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MTS_DAL.Entities.RAMBRAKDOWN", "RAMBRAKDOWN")
                        .WithMany("RAMBRAKDOWNPARTS")
                        .HasForeignKey("PWBS", "WBS")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RAMBRAKDOWN");

                    b.Navigation("RAMProjects");
                });

            modelBuilder.Entity("MTS_DAL.Entities.RAMPARTS", b =>
                {
                    b.HasOne("MTS_DAL.Entities.RAMCAGE", "RAMCAGE")
                        .WithMany()
                        .HasForeignKey("CAGECDXH")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("RAMCAGE");
                });

            modelBuilder.Entity("MTS_DAL.Entities.RAMProjects", b =>
                {
                    b.HasOne("MTS_DAL.Entities.Lifecyclephases", "lifecyclephases")
                        .WithMany()
                        .HasForeignKey("LIFECYCLEPHASEID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MTS_DAL.Entities.ProductTypes", "productTypes")
                        .WithMany()
                        .HasForeignKey("TYPEOFPRODUCTID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("lifecyclephases");

                    b.Navigation("productTypes");
                });

            modelBuilder.Entity("MTS_DAL.Entities.TwoOneSeveenNoticeTwo.R2IntegratedCircuitsPlasticEncapsulatedPartType", b =>
                {
                    b.HasOne("MTS_DAL.Entities.TwoOneSeveenNoticeTwo.R2IntegratedCircuitsPlasticEncapsulatedPackageType", "PlasticEncapsulatedPackageType")
                        .WithMany()
                        .HasForeignKey("PackageTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PlasticEncapsulatedPackageType");
                });

            modelBuilder.Entity("MTS_DAL.Entities.RAMBRAKDOWN", b =>
                {
                    b.Navigation("RAMBRAKDOWNPARTS");
                });
#pragma warning restore 612, 618
        }
    }
}
